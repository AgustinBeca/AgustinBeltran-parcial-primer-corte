{"mappings":"AEAA,iFAAiF;AACjF,uFAAuF;AACvF,6CAA6C;AAE7C,IAAI;AACJ,gBAAgB;AAChB,sBAAsB;AACtB,qBAAqB;AACrB,qEAAqE;AACrE,qBAAqB;AACrB,SAAS;AACT,mBAAmB;AACnB,UAAU;AACV,mBAAmB;AACnB,kCAAkC;AAClC,6BAA6B;AAC7B,8BAA8B;AAC9B,sBAAsB;AACtB,4BAA4B;AAC5B,sBAAsB;AACtB,6BAA6B;AAC7B,gEAAgE;AAChE,aAAa;AACb,wBAAwB;AACxB,6BAA6B;AAC7B,iEAAiE;AACjE,aAAa;AACb,8EAA8E;AAC9E,uBAAuB;AACvB,yDAAyD;AACzD,yDAAyD;AACzD,mBAAmB;AACnB,aAAa;AACb,gEAAgE;AAChE,gDAAgD;AAChD,WAAW;AACX,eAAe;AACf,QAAQ;AACR,MAAM;ADpCN,mEAAmE;AACnE,MAAM,EAAU,ICqChB,MACE,gFAAgF;AAEhF,YAAY,CAAK,CAAE,CACjB,IAAI,CAAC,KAAA,CAAQ,CACf,CAEA,iEAAiE;AACjE,mDAAmD;AAEnD,IAAI;AACJ,8BAA8B;AAC9B,yBAAyB;AACzB,0BAA0B;AAC1B,4BAA4B;AAC5B,2BAA2B;AAC3B,0EAA0E;AAC1E,qDAAqD;AACrD,iDAAiD;AACjD,IAAI;AAEJ,oFAAoF;AACpF,sFAAsF;AAEtF,uBAAuB;AAEvB,iBAAiB;AACjB,0CAA0C;AAC1C,8BAA8B;AAC9B,8BAA8B;AAC9B,MAAM;AAEN,2BAA2B;AAE3B,0CAA0C;AAC1C,gDAAgD;AAEhD,kBAAkB;AAClB,MAAM,kBAAmB,CACvB,4EAA4E;AAE5E;;;;;;;;;;;;;;;;;;;;;;;OAuBG,EAEH,IAAM,EAAW,MAAM,MAAM,IAAI,CAAC,KAF/B,EAIG,EAAO,MAAM,EAAS,IAA5B,GAEM,EAAgB,EAAK,OAAA,CAAQ,GAAA,CAAI,AAAC,GAAe,CAAA,CACrD,KAAM,EAAU,IAAhB,CACA,OAAQ,EAAU,MAAlB,CACA,QAAS,EAAU,OAAnB,CACA,UAAW,EAAU,MAAA,CAAO,IAA5B,CACA,SAAU,EAAU,QAAA,CAAS,IAA7B,CACA,MAAO,EAAU,KAAjB,CACA,QAAS,wBACT,KAAM,YACR,CAAA,GAEA,OAAO,CAEP,2BAA0B;AAC1B,oBAAoB;AACtB,CACF,ED1HE,4CA0DF,0DAAyD;CACzD,AAxDA,iEAAiE;AACjE,4FAA4F;AAC5F,wGAAwG;AACxG,+DAA+D;AAE/D,kBAAkB;AAElB,WACE,iDAAiD;AACjD,mDAAmD;AACnD,IAAM,EAAgB,SAAS,cAAA,CAAe,kBAC9C,QAAQ,GAAA,CAAK,GACb,EACG,gBAAA,GACA,IAAA,CAAK,AAAC,IACL,EAAW,OAAA,CAAQ,AAAC,IAClB,QAAQ,GAAA,CAAI,GAuBM,AAtBE,EAsBQ,IAAA,CACV,AAvBE,EAuBQ,MAAA,CACV,AAxBE,EAwBQ,OAAA,CACV,AAzBE,EAyBQ,SAAA,CACV,AA1BE,EA0BQ,QAAA,CACN,AA3BF,EA2BY,KAAA,CAAe,AA3B3B,EA2BqC,IAAA,AA1BzD,oCAAmC;AACrC,EACF,GACC,KAAA,CAAM,AAAC,IACN,QAAQ,GAAA,CAAI,EACd,EACJ,G,4D","sources":["<anon>","src/index.js","src/service.js"],"sourcesContent":["// esta clase se encargará de llamar de rick & morty para obtener todos los datos\n// el servicio tiene como endpoint de accesso https://rickandmortyapi.com/api/character\n// que tiene como respuesta el siguiente json\n// {\n//     \"info\": {\n//       \"count\": 826,\n//       \"pages\": 42,\n//       \"next\": \"https://rickandmortyapi.com/api/character/?page=2\",\n//       \"prev\": null\n//     },\n//     \"results\": [\n//       {\n//         \"id\": 1,\n//         \"name\": \"Rick Sanchez\",\n//         \"status\": \"Alive\",\n//         \"species\": \"Human\",\n//         \"type\": \"\",\n//         \"gender\": \"Male\",\n//         \"origin\": {\n//           \"name\": \"Earth\",\n//           \"url\": \"https://rickandmortyapi.com/api/location/1\"\n//         },\n//         \"location\": {\n//           \"name\": \"Earth\",\n//           \"url\": \"https://rickandmortyapi.com/api/location/20\"\n//         },\n//         \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\n//         \"episode\": [\n//           \"https://rickandmortyapi.com/api/episode/1\",\n//           \"https://rickandmortyapi.com/api/episode/2\",\n//           // ...\n//         ],\n//         \"url\": \"https://rickandmortyapi.com/api/character/1\",\n//         \"created\": \"2017-11-04T18:48:46.250Z\"\n//       },\n//       // ...\n//     ]\n//   }\nclass $2b036f15af3cb29a$var$RickAndMortyService {\n    // el constructor debe inicializar una variable con la url de acceso base al API\n    constructor(miurl){\n        this.miurl = miurl;\n    }\n    // este método deberá llamar al servicio y obtener los personajes\n    // deberá devolver un objeto de la siguiente manera\n    // {\n    //     \"name\": \"Rick Sanchez\",\n    //     \"status\": \"Alive\",\n    //     \"species\": \"Human\",\n    //     \"firstSeen\": \"Earth\",\n    //     \"location\": \"Earth\",\n    //     \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\n    //     \"student\": \"aqui va el nombre del estudiante\",\n    //     \"code\": \"aqui va el codigo del estudiante\"\n    // }\n    // deberá realizar el respectivo manejo de error en caso de errores al llamar el API\n    // se recomienda usar el api fetch para obtener los datos como en el siguiente ejemplo\n    // ejemplo con promesas\n    // fetch('miurl')\n    //  .then((respuesta) => respuesta.json())\n    //  .then((mispersonajes) => {\n    //     //aqui dentro mi logica\n    //  })\n    //  ejemplo con async/await\n    //  const response = await fetch('miurl');\n    //  const mispersonajes = await response.json();\n    // valor (1 punto)\n    async getAllCharacters() {\n        // aqui va tu llamado al API usando fetch puedes usar promesas o asycn/await\n        /* return new Promise((resolve, reject) => {\r\n      fetch(this.miurl)\r\n      .then((respuesta) => respuesta.json())\r\n      .then((mispersonajes) => {\r\n        //console.log(mispersonajes.results);\r\n        const personajes = [];\r\n        for (var i = 0; i < mispersonajes.results.length; i++) {\r\n          personajes.push({\r\n            name: mispersonajes.results[i].name,\r\n            status: mispersonajes.results[i].status,\r\n            species: mispersonajes.results[i].species,\r\n            firstSeen: mispersonajes.results[i].origin.name,\r\n            location: mispersonajes.results[i].location.name,\r\n            image: mispersonajes.results[i].image,\r\n            student: \"Agustin Beltran Casas\",\r\n            code: \"0000201162\",\r\n          });\r\n        }\r\n        resolve(mispersonajes);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n    }) */ const response = await fetch(this.miurl);\n        const data = await response.json();\n        const mispersonajes = data.results.map((personaje)=>({\n                name: personaje.name,\n                status: personaje.status,\n                species: personaje.species,\n                firstSeen: personaje.origin.name,\n                location: personaje.location.name,\n                image: personaje.image,\n                student: \"Agustin Beltran Casas\",\n                code: \"0000201162\"\n            }));\n        return mispersonajes;\n    //console.log(personajes);\n    //return personajes;\n    }\n}\nvar $2b036f15af3cb29a$export$2e2bcd8739ae039 = $2b036f15af3cb29a$var$RickAndMortyService;\n\n\n// acá deberás crear una instancia del servicio RickAndMortyService\nconst $35da740d59af89ba$var$service = new (0, $2b036f15af3cb29a$export$2e2bcd8739ae039)(\"https://rickandmortyapi.com/api/character\");\n// esta función debe encargarse de obtener el elemento contenedor\n// y agregar los personajes obtenidos por el API, deberás llamar tu función getAllCharacters\n// iterar el arreglo de personajes y llamar a la función createCharacterCard para agregar cada personaje\n// a el contenedor puedes usar la propiedad innerHTML para esto\n// valor (1 punto)\nfunction $35da740d59af89ba$var$createCharacterList() {\n    // llamar primero createCharacterCard(character);\n    // llamar segundo addCharacterListeners(character);\n    const containerList = document.getElementById(\"character-list\");\n    console.log(containerList);\n    $35da740d59af89ba$var$service.getAllCharacters().then((personajes)=>{\n        personajes.forEach((personaje)=>{\n            console.log(personaje);\n            $35da740d59af89ba$var$createCharacterCard(personaje);\n        //addCharacterListeners(personaje);\n        });\n    }).catch((error)=>{\n        console.log(error);\n    });\n}\n// esta función debe devolver la estructura html en string de tu personaje ejemplo\n// `<div class=\"character\">\n//      <span>${gender}</span>\n//      <span>${name}</span>\n// </div>`;\n// deberás usar los elementos correctos de HTML para poder visualizar el personaje\n// valor (1 punto) HTML\nfunction $35da740d59af89ba$var$createCharacterCard(character) {\n    const card = `<div class=\"character\">\r\n                  <span>${character.name}</span> \r\n                  <span>${character.status}</span>\r\n                  <span>${character.species}</span>\r\n                  <span>${character.firstSeen}</span>\r\n                  <span>${character.location}</span>\r\n                  <img src=\"${character.image}\" alt=\"${character.name + \"Image\"}\" />\r\n                </div>`;\n    return card;\n}\n// esta función deberá obtener todos los personajes y deberá agregarles un evento de click\n// cuando se seleccione un personaje debe decir hola soy 'nombre personaje', recuerda que puedes obtener\n// el elemento target de un evento y así obtener sus propiedades\nfunction $35da740d59af89ba$var$addCharacterListeners(character) {}\n// por último se llama la función y se renderiza la vista\n$35da740d59af89ba$var$createCharacterList();\n\n\n//# sourceMappingURL=index.03305ff1.js.map\n","import RickAndMortyService from \"./service\";\r\n\r\n// acá deberás crear una instancia del servicio RickAndMortyService\r\nconst service = new RickAndMortyService(\r\n  \"https://rickandmortyapi.com/api/character\"\r\n);\r\n\r\n// esta función debe encargarse de obtener el elemento contenedor\r\n// y agregar los personajes obtenidos por el API, deberás llamar tu función getAllCharacters\r\n// iterar el arreglo de personajes y llamar a la función createCharacterCard para agregar cada personaje\r\n// a el contenedor puedes usar la propiedad innerHTML para esto\r\n\r\n// valor (1 punto)\r\n\r\nfunction createCharacterList() {\r\n  // llamar primero createCharacterCard(character);\r\n  // llamar segundo addCharacterListeners(character);\r\n  const containerList = document.getElementById(\"character-list\");\r\n  console.log (containerList); \r\n  service\r\n    .getAllCharacters()\r\n    .then((personajes) => {\r\n      personajes.forEach((personaje) => {\r\n        console.log(personaje);\r\n        createCharacterCard(personaje);\r\n        //addCharacterListeners(personaje);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n}\r\n\r\n// esta función debe devolver la estructura html en string de tu personaje ejemplo\r\n\r\n// `<div class=\"character\">\r\n//      <span>${gender}</span>\r\n//      <span>${name}</span>\r\n// </div>`;\r\n\r\n// deberás usar los elementos correctos de HTML para poder visualizar el personaje\r\n\r\n// valor (1 punto) HTML\r\n\r\nfunction createCharacterCard(character) {\r\n  const card = `<div class=\"character\">\r\n                  <span>${character.name}</span> \r\n                  <span>${character.status}</span>\r\n                  <span>${character.species}</span>\r\n                  <span>${character.firstSeen}</span>\r\n                  <span>${character.location}</span>\r\n                  <img src=\"${character.image}\" alt=\"${character.name + \"Image\"}\" />\r\n                </div>`;\r\n  return card;\r\n}\r\n\r\n// esta función deberá obtener todos los personajes y deberá agregarles un evento de click\r\n// cuando se seleccione un personaje debe decir hola soy 'nombre personaje', recuerda que puedes obtener\r\n// el elemento target de un evento y así obtener sus propiedades\r\n\r\nfunction addCharacterListeners(character) {}\r\n\r\n// por último se llama la función y se renderiza la vista\r\ncreateCharacterList();\r\n","// esta clase se encargará de llamar de rick & morty para obtener todos los datos\r\n// el servicio tiene como endpoint de accesso https://rickandmortyapi.com/api/character\r\n// que tiene como respuesta el siguiente json\r\n\r\n// {\r\n//     \"info\": {\r\n//       \"count\": 826,\r\n//       \"pages\": 42,\r\n//       \"next\": \"https://rickandmortyapi.com/api/character/?page=2\",\r\n//       \"prev\": null\r\n//     },\r\n//     \"results\": [\r\n//       {\r\n//         \"id\": 1,\r\n//         \"name\": \"Rick Sanchez\",\r\n//         \"status\": \"Alive\",\r\n//         \"species\": \"Human\",\r\n//         \"type\": \"\",\r\n//         \"gender\": \"Male\",\r\n//         \"origin\": {\r\n//           \"name\": \"Earth\",\r\n//           \"url\": \"https://rickandmortyapi.com/api/location/1\"\r\n//         },\r\n//         \"location\": {\r\n//           \"name\": \"Earth\",\r\n//           \"url\": \"https://rickandmortyapi.com/api/location/20\"\r\n//         },\r\n//         \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\r\n//         \"episode\": [\r\n//           \"https://rickandmortyapi.com/api/episode/1\",\r\n//           \"https://rickandmortyapi.com/api/episode/2\",\r\n//           // ...\r\n//         ],\r\n//         \"url\": \"https://rickandmortyapi.com/api/character/1\",\r\n//         \"created\": \"2017-11-04T18:48:46.250Z\"\r\n//       },\r\n//       // ...\r\n//     ]\r\n//   }\r\n\r\nclass RickAndMortyService {\r\n  // el constructor debe inicializar una variable con la url de acceso base al API\r\n\r\n  constructor(miurl) {\r\n    this.miurl = miurl;\r\n  }\r\n\r\n  // este método deberá llamar al servicio y obtener los personajes\r\n  // deberá devolver un objeto de la siguiente manera\r\n\r\n  // {\r\n  //     \"name\": \"Rick Sanchez\",\r\n  //     \"status\": \"Alive\",\r\n  //     \"species\": \"Human\",\r\n  //     \"firstSeen\": \"Earth\",\r\n  //     \"location\": \"Earth\",\r\n  //     \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\r\n  //     \"student\": \"aqui va el nombre del estudiante\",\r\n  //     \"code\": \"aqui va el codigo del estudiante\"\r\n  // }\r\n\r\n  // deberá realizar el respectivo manejo de error en caso de errores al llamar el API\r\n  // se recomienda usar el api fetch para obtener los datos como en el siguiente ejemplo\r\n\r\n  // ejemplo con promesas\r\n\r\n  // fetch('miurl')\r\n  //  .then((respuesta) => respuesta.json())\r\n  //  .then((mispersonajes) => {\r\n  //     //aqui dentro mi logica\r\n  //  })\r\n\r\n  //  ejemplo con async/await\r\n\r\n  //  const response = await fetch('miurl');\r\n  //  const mispersonajes = await response.json();\r\n\r\n  // valor (1 punto)\r\n  async getAllCharacters() {\r\n    // aqui va tu llamado al API usando fetch puedes usar promesas o asycn/await\r\n\r\n    /* return new Promise((resolve, reject) => {\r\n      fetch(this.miurl)\r\n      .then((respuesta) => respuesta.json())\r\n      .then((mispersonajes) => {\r\n        //console.log(mispersonajes.results);\r\n        const personajes = [];\r\n        for (var i = 0; i < mispersonajes.results.length; i++) {\r\n          personajes.push({\r\n            name: mispersonajes.results[i].name,\r\n            status: mispersonajes.results[i].status,\r\n            species: mispersonajes.results[i].species,\r\n            firstSeen: mispersonajes.results[i].origin.name,\r\n            location: mispersonajes.results[i].location.name,\r\n            image: mispersonajes.results[i].image,\r\n            student: \"Agustin Beltran Casas\",\r\n            code: \"0000201162\",\r\n          });\r\n        }\r\n        resolve(mispersonajes);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n    }) */\r\n\r\n    const response = await fetch(this.miurl);\r\n\r\n    const data = await response.json();\r\n\r\n    const mispersonajes = data.results.map((personaje) => ({\r\n      name: personaje.name,\r\n      status: personaje.status,\r\n      species: personaje.species,\r\n      firstSeen: personaje.origin.name,\r\n      location: personaje.location.name,\r\n      image: personaje.image,\r\n      student: \"Agustin Beltran Casas\",\r\n      code: \"0000201162\",\r\n    }));\r\n\r\n    return mispersonajes;\r\n\r\n    //console.log(personajes);\r\n    //return personajes;\r\n  }\r\n}\r\n\r\nexport default RickAndMortyService;\r\n"],"names":["$35da740d59af89ba$var$service","constructor","miurl","getAllCharacters","response","fetch","data","json","mispersonajes","results","map","personaje","name","status","species","firstSeen","origin","location","image","student","code","$35da740d59af89ba$var$createCharacterList","containerList","document","getElementById","console","log","then","personajes","forEach","character","catch","error"],"version":3,"file":"index.03305ff1.js.map"}